@page
@model MacroFit.Pages.IndexModel
@if (Model.LoginCheck)
{
    <p>First Name: @Model.User.FirstName</p><br/>
    <p>Last Name: @Model.User.LastName</p><br />
    <p>User Daily Calorie Goal: @Model.User.UserSettings.CalorieGoal</p><br />
}
else
{
    <partial name="_IndexPartial" />
}

<div class="container mt-5">
    <h1 class="text-center mb-4">Food Search Engine</h1>
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Search for food products" id="search-input">
                <button class="btn btn-primary" type="button" id="search-btn">Search</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div id="search-results"></div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function () {
        var searchInput = $('#search-input');
        var searchBtn = $('#search-btn');
        var searchResults = $('#search-results');
        var apiUrl = 'http://localhost:44391/api/search/list/';
        var lastSearchTerm = '';

        var minimumSearchLength = 2;
        var foodNameRegex = /^[a-zA-Z0-9\s\-_()&',./]+$/;

        searchInput.keyup(function (event) {
            if (event.keyCode === 13) {
                searchBtn.click();
            }
        });

        searchBtn.on('click', function () {
            var searchTerm = searchInput.val().trim();
            if (searchTerm.length > minimumSearchLength && searchTerm !== lastSearchTerm && foodNameRegex.test(searchTerm)) {
                lastSearchTerm = searchTerm;
                searchApi(searchTerm);
            } else if (searchTerm.length <= minimumSearchLength) {
                searchResults.html('<div class="alert alert-danger" role="alert">Please enter at least ' + (minimumSearchLength + 1) + ' characters.</div>');
            } else if (!foodNameRegex.test(searchTerm)) {
                searchResults.html('<div class="alert alert-danger" role="alert">Invalid search term. Only alphanumeric characters and limited special characters are allowed.</div>');
            }
        });

        function searchApi(searchTerm) {
            searchResults.html('<div class="d-flex justify-content-center my-3"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');

            $.ajax({
                url: apiUrl + searchTerm,
                type: 'GET',
                success: function (data) {
                    if (data.length > 0) {
                        var resultsHtml = '';
                        $.each(data, function (index, item) {
                            resultsHtml += '<div class="card mb-3">';
                            resultsHtml += '<div class="card-body">';
                            resultsHtml += '<h5 class="card-title">' + item.name + '</h5>';
                            resultsHtml += '<p class="card-text">Barcode: ' + item.barcode + '</p>';
                            resultsHtml += '<p class="card-text">Serving Size: ' + item.servingSize + ' ' + item.foodUnit.symbolName + '</p>';
                            resultsHtml += '<p class="card-text">Calories: ' + item.calories + '</p>';
                            resultsHtml += '<p class="card-text">Protein: ' + parseFloat(item.protein).toFixed(2) + ' g</p>';
                            resultsHtml += '<p class="card-text">Carbohydrates: ' + parseFloat(item.carbohydrates).toFixed(2) + ' g</p>';
                            resultsHtml += '<p class="card-text">Fat: ' + parseFloat(item.fat).toFixed(2) + ' g</p>';
                            resultsHtml += '<p class="card-text">Saturated Fat: ' + parseFloat(item.fatSat).toFixed(2) + ' g</p>';
                            resultsHtml += '<p class="card-text">Fibre: ' + parseFloat(item.fibre).toFixed(2) + ' g</p>';
                            resultsHtml += '<p class="card-text">Sugar: ' + parseFloat(item.sugar).toFixed(2) + ' g</p>';
                            resultsHtml += '<p class="card-text">Sodium: ' + parseFloat(item.sodium).toFixed(2) + ' g</p>';
                            resultsHtml += '</div>';
                            resultsHtml += '</div>';
                        });
                        searchResults.html(resultsHtml);
                    }
                },
                error: function (xhr) {
                    if (xhr.status === 404) {
                        //No food items found
                        searchResults.html('<div class="alert alert-warning" role="alert">No food products found.</div><button class="btn btn-primary" type="button" id="add-data-btn">Add Data Manually</button>');
                    } else if (xhr.status >= 400 && xhr.status < 500) {
                        // Error retrieving search results: Bad connection
                        searchResults.html('<div class="alert alert-danger" role="alert">Error retrieving search results: Bad connection.</div>');
                    } else {
                        // Error retrieving search results
                        searchResults.html('<div class="alert alert-danger" role="alert">Error retrieving search results.</div>');
                    }
                }
            });
        }
    });
</script>